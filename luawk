#!/usr/bin/env lua
local json = require "dkjson"

-- prefer modules from local path
package.path = "./.lua;" .. package.path
local USAGE=[[
NAME
       *luawk* process line oriented records with lua

SYNOPSIS
       luawk [options] -- commands ...

OPTIONS
       -j    parse input lines as JSON objects

       -p    print transformed records

       -f  file
             load a file before processing

       -l  lib
             reqire a library before processing

       -BEGIN block
             execute block before processing

       -END block
             execute block after processing

       -m  lib
             Read process,BEGIN,END from a library
]]

printj = function(...) print(json.encode(...)) end
printf = function(...) print(string.format(...)) end

local cmd = "true"

carg = arg[1]
local shift = function()
  table.remove(arg,1)
  carg = arg[1]
end

-- flags
local do_json = false
local do_print = false
local process = function() end
local BEGIN = function() end
local END = function() end

function LOOP()
  BEGIN()
  local c = 0
  for l in io.lines() do
    -- _ needs to be in global env, not shadowed by loop variable in this block
    _ = l
    c = c+1
    if do_json then _ = json.decode(_) end
    local ok = pcall(process)
    if not ok then io.stderr:write(string.format("Line %d: Processing failed\n", c)) end
    if do_json  then _ = json.encode(_) end
    if do_print then print(_) end
  end
  END()
end

while true do
  if not carg then
    break
  elseif carg == "-j" then
    do_json = true
  elseif carg == "-p" then
    do_print = true
  elseif carg == "-f" then
    shift()
    process, err = loadfile(carg)
    if err then error(err) end
  elseif carg == "-m" then
    shift()
    local M = require(carg)
    process = M.process
    BEGIN = M.BEGIN or BEGIN
    END = M.END or END
  elseif carg == "-l" then
    shift()
    require(carg)
  elseif carg == "-BEGIN" then
    shift()
    BEGIN, err = loadstring(carg)
    if err then error(err) end
  elseif carg == "-END" then
    shift()
    END, err = loadstring(carg)
    if err then error(err) end
  elseif carg == "--" then
    shift()
    process, err = loadstring(table.concat(arg, " "))
    if err then error(err) end
    break
  elseif carg == "-h" or carg == "--help" then
    print(USAGE)
    os.exit(0)
  else
    print(USAGE)
    os.exit(0)
  end
  shift()
end
LOOP()
