#!/usr/bin/env lua
--
-- Usage: jqselect fields [fields...]
--
--   Selects the named fields from json records provided on stdin and outputs them as CSV file
--
-- Example:
--
--     $ echo '{"a":1,"b":2,"c":3}' | jqselect a c
--     > a,c
--     > 1,3
--
json = require "dkjson"

local HEAD = {}
local SELECT = {}

-- A = ".start.id" name="ID:INTEGER"
local function process_sel_as(A, name)
  local path = {}
  string.gsub(A,"([^.]+)", function(tok) table.insert(path, tok) end)
  HEAD[#HEAD+1] = name
  SELECT[name] = path
end
-- A = '.start'
local function process_sel(A)
  local name = string.match(A,"[^.]*$")
  process_sel_as(A, name)
end
-- pargs = ".args.q as query:INTEGER"
local function process_part(part)
  _, n = string.gsub(part,"([.:_a-zA-Z0-9]+)[ ]+as[ ]+([.:_a-zA-Z0-9]+)", process_sel_as)
  if n > 0 then return end
  string.gsub(part,"([.:_a-zA-Z0-9]+)", process_sel)
end
-- argsr = ".start, .args.q as query, .id"
local function process_argstr(A)
  string.gsub(A," +", " ")
  string.gsub(A, "([^,]+)", process_part)
end

process_argstr(table.concat(arg, " "))

local sep, space, quote, dquote = ",", " ", '"', '""'
function csvescape(val)
  local tval = type(val)
  if tval == "string" then
    if val:match(quote) then
      return quote .. val:gsub(quote,dquote) .. quote
    elseif val:match(space) or val:match(sep) then
      return quote .. val .. quote
    else -- no spaces no quotes no separators
      return val
    end
  elseif tval == "number" then
    return tostring(val)
  else
    return ''
  end
end
print(table.concat(HEAD, sep)) -- print headline
for line in io.lines() do
  local rec = json.decode(line)
  local out = {}
  for i, h in ipairs(HEAD) do
    local cur = rec
    for _, tok in ipairs(SELECT[h]) do
      cur = cur[tok]
      if not cur then
        cur = ""
        break
      end
    end
    out[i] = csvescape(cur)
  end
  print(table.concat(out,sep))
end
